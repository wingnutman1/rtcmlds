
@{
    ViewBag.Title = "Exception History";
}

<p class="dataHeader">Exception History</p>


@(Html.Kendo().Notification()
    .Name("popupNotification")
)

<div id="vertical">
    <div style="font-size:larger">
        Exception : <b>@(ViewData["ExceptionDescription"])</b> for staff member : <b>@(ViewData["exceptionStaffName"])</b>
    </div>
    <span style="font-size:larger">History</span>
    @(Html.Kendo().Grid<CMS_Web.Models.ExceptionHistory>()
                .Name("exceptionHistoryGrid")
                .Columns(columns =>
                {
                    columns.Bound(p => p.ActionDate).Title("Date").Format("{0:dd/MM/yyyy hh:mm tt}").Width("15%");
                    columns.Bound(p => p.ActionDescription).Title("What Happened").Width("70%");
                    columns.Bound(p => p.ActionStaffID).Hidden(true);
                    columns.ForeignKey(p => p.ActionStaffID, (System.Collections.IEnumerable)ViewData["UserProfiles"], "UserID", "FullName").Title("By").Width("15%");
                })
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .HtmlAttributes(new { style = "height:400px; margin-top:10px" })
    .Resizable(resize => resize.Columns(true))
    .DataSource(dataSource => dataSource.Ajax()
        .Model(model => model.Id(p => p.ID))
        .Read(read => read.Action("GetExceptionHistory", "Exceptions").Data("exceptionID"))
        .Sort(s => s.Add("ActionDate").Descending())
        )
    )
    <span style="font-size:larger">Notes</span>
    @(Html.Kendo().Grid<CMS_Web.Models.ExceptionNote>()
                .Name("exceptionNoteGrid")
                .Columns(columns =>
                {
                    columns.Bound(p => p.EditDate).Title("Date").Format("{0:dd/MM/yyyy hh:mm tt}").Width("15%");
                    columns.Bound(p => p.NoteText).Title("Note").Width("50%");
                    columns.Bound(p => p.CreationStaffID).Hidden(true);
                    columns.Bound(p => p.Deleted).Hidden(true);
                    columns.Bound(p => p.NoteDate).Hidden(true);
                    columns.Bound(p => p.ParentID).Hidden(true);
                    columns.ForeignKey(p => p.LastEditStaffID, (System.Collections.IEnumerable)ViewData["UserProfiles"], "UserID", "FullName").Title("Last Edit By").Width("15%");
                    columns.Command(c => c.Edit()).Width(40).Width("10%");
                    columns.Command(c => c.Destroy()).Width(40).Width("10%");
                })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("exceptionNoteEditor"))
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .HtmlAttributes(new { style = "height:400px; margin-top:10px" })
    .Resizable(resize => resize.Columns(true))
    .DataSource(dataSource => dataSource.Ajax()
        .Model(model => model.Id(p => p.ID))
        .Read(read => read.Action("GetExceptionNotes", "Exceptions").Data("exceptionID"))
        .Create(update => update.Action("exceptionNoteInline_Create", "Exceptions").Data("exceptionID"))
        .Update(update => update.Action("exceptionNoteInline_Update", "Exceptions").Data("exceptionID"))
        .Destroy(update => update.Action("exceptionNoteInline_Destroy", "Exceptions"))
        .Events(e => e.Sync("refreshNotes"))
        .Sort(s => s.Add("EditDate").Descending())
        )
    )

    <span class="k-button" style="float:right; margin-top:10px; margin-bottom:10px">
        @Html.ActionLink("Return to " + ViewData["returnPage"], (string)ViewData["returnPage"], "Exceptions")
    </span>

</div>

<style scoped>
    #vertical {
        height: auto;
        width: 1000px;
        margin: 0 auto;
    }
</style>

<!--Reference the SignalR library. -->
<script src="/Scripts/jquery.signalR-2.1.2.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="/signalr/hubs"></script>

<script>

    function exceptionID()
    {
        var ID = @ViewData["ExceptionID"];
        return { exceptionID: ID };
    }

    function refreshNotes(e)
    {
        
        $("#exceptionNoteGrid").data("kendoGrid").dataSource.read();
    }

    $(document).ready(function () {


        var messageHub = $.connection.messageHub;
        var userName = "@HttpContext.Current.User.Identity.Name";

        $.connection.hub.qs = { 'userName': userName };
        var popupNotification = $("#popupNotification").data("kendoNotification");

        if ($.connection.hub.state === $.signalR.connectionState.disconnected) {
            $.connection.hub.start().done(function () {//when the connection is ready,

                popupNotification.show("Server Connection Established");
            });
        }

        messageHub.client.send = function (message) {
            if (message.messageType == "PM")
                popupNotification.show(message.message);
        };


    });

</script>

