
@model CMS_Web.Models.IncidentType

@{
    ViewBag.Title = "Incident Types";
}

<p class="dataHeader">Incident Types</p>



@(Html.Kendo().Notification()
    .Name("popupNotification")
)

<div id="vertical">
    
    @Html.ValidationSummary()
    
    @(Html.Kendo().Grid<CMS_Web.Models.IncidentType>()
                .Name("incidentType")
                .Columns(columns => {
                    columns.Bound(p => p.Type).Title("Type").Width("15%");

                    columns.Bound(p => p.useOnCallProcessing).Title("useOnCallProcessing").Hidden(true);
                    columns.Bound(p => p.onCallCalendarID).Title("onCallCalendarID").Hidden(true);

                    columns.Bound(p => p.firstStaffEscID).Title("firstStaffEscID").Hidden(true);
                    columns.ForeignKey(p => p.firstStaffEscID, (System.Collections.IEnumerable)ViewData["UserProfiles"], "UserID", "FullName").Title("1st Notified").Width("15%");
                    columns.Bound(p => p.firstEscDays).Title("firstEscDays").Hidden(true);
                    columns.Bound(p => p.firstEscHours).Title("firstEscHours").Hidden(true);
                    columns.Bound(p => p.firstEscMinutes).Title("firstEscMinutes").Hidden(true);

                    columns.Bound(p => p.secondStaffEscID).Title("secondStaffEscID").Hidden(true);
                    columns.ForeignKey(p => p.secondStaffEscID, (System.Collections.IEnumerable)ViewData["UserProfiles"], "UserID", "FullName").Title("1st Backup").Width("15%");
                    columns.Bound(p => p.secondEscDays).Title("secondEscDays").Hidden(true);
                    columns.Bound(p => p.secondEscHours).Title("secondEscHours").Hidden(true);
                    columns.Bound(p => p.secondEscMinutes).Title("secondEscMinutes").Hidden(true);

                    columns.Bound(p => p.thirdStaffEscID).Title("thirdStaffEscID").Hidden(true);
                    columns.ForeignKey(p => p.thirdStaffEscID, (System.Collections.IEnumerable)ViewData["UserProfiles"], "UserID", "FullName").Title("Final Notified").Width("15%");
                    columns.Bound(p => p.thirdEscDays).Title("thirdEscDays").Hidden(true);
                    columns.Bound(p => p.thirdEscHours).Title("thirdEscHours").Hidden(true);
                    columns.Bound(p => p.thirdEscMinutes).Title("thirdEscMinutes").Hidden(true);

                    //columns.Bound(p => p.templateFileLocation).Title("Template File").Width("15%").ClientTemplate("#= fileNameOnly(data.templateFileLocation) #");
                    columns.Command(command => command.Custom("Template").Click("manageTemplates")).Width("12%");
                    columns.Command(c => c.Edit()).Width("11%");
                    columns.Command(c => c.Destroy()).Width("11%");
                })
                .ToolBar(toolbar => toolbar.Create())
                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("incidentTypeTemplate"))
                .Selectable()
                .Pageable()
                .Sortable()
                .Scrollable()
                .Filterable()
                .HtmlAttributes(new { style = "height:430px;" })
                .DataSource(dataSource => dataSource.Ajax()
                    .Model(model => model.Id(p => p.ID))
                    .Read(read => read.Action("GetIncidentTypes", "Incidents"))
                    .Create(update => update.Action("incidentTypesEditingInline_Create" , "Incidents"))
                    .Update(update => update.Action("incidentTypesEditingInline_Update" , "Incidents"))
                    .Destroy(update => update.Action("incidentTypesEditingInline_Destroy" , "Incidents"))
                    .Events(events => events.Sync("update"))
                )
                .Resizable(resize => resize.Columns(true))
                

            )          

</div>              

<style scoped>
        #vertical {
            height: 600px;
            width: 1000px;
            margin: 0 auto;
        }

</style>

<!--Reference the SignalR library. -->
<script src="/Scripts/jquery.signalR-2.1.2.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="/signalr/hubs"></script>

<script>
    function fileNameOnly(fullPath)
    {
        if (fullPath != null) {
            var name = fullPath.replace(/^.*(\\|\/|\:)/, '');
            return name;
        }
        else
        {
            return "No Template File";
        }
    }

    function manageTemplates(e)
    {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("incidentTypeTemplateFiles", "incidents")?ID=" + dataItem.ID;
    }

    function update(e)
    {
        var grid = $("#incidentType").data("kendoGrid");
        grid.dataSource.read();
    }

    $(document).ready(function () {


        var messageHub = $.connection.messageHub;
        var userName = "@HttpContext.Current.User.Identity.Name";

        $.connection.hub.qs = { 'userName': userName };
        var popupNotification = $("#popupNotification").data("kendoNotification");

        if ($.connection.hub.state === $.signalR.connectionState.disconnected) {
            $.connection.hub.start().done(function () {//when the connection is ready,

                popupNotification.show("Server Connection Established");
            });
        }

        messageHub.client.send = function (message) {
            if (message.messageType == "PM")
                popupNotification.show(message.message);
        };


    });

</script>