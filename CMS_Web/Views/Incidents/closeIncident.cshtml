@model CMS_Web.Models.Incident

@{
    ViewBag.Title = "Close Incident";
}

<p class="dataHeader">Close Incident : <b>@(ViewData["IncidentDescription"])</b></p>

@(Html.Kendo().Notification()
    .Name("popupNotification")
)

<div id="vertical">
    <span style="font-size:x-large"> IncidentHistory </span>
    @(Html.Kendo().Grid<CMS_Web.Models.IncidentHistory>()
                .Name("incidentHistoryGrid")

                .Columns(columns =>
                {
                    columns.Bound(p => p.historyEntryCreationDate).Title("Entry Date").Format("{0:dd/MM/yyyy hh:mm tt}");
                    columns.Bound(p => p.currentActionDescription).Title("Action");
                    columns.Bound(p => p.currentStaffID).Hidden(true);
                    columns.ForeignKey(p => p.currentStaffID, (System.Collections.IEnumerable)ViewData["UserProfiles"], "UserID", "FullName").Title("Current");
                    columns.Bound(p => p.actionByDate).Title("Due By").Format("{0:dd/MM/yyyy hh:mm tt}");
                    columns.Bound(p => p.actionByStaffID).Hidden(true);
                    columns.ForeignKey(p => p.actionByStaffID, (System.Collections.IEnumerable)ViewData["UserProfiles"], "UserID", "FullName").Title("Next Action By");

                })
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .HtmlAttributes(new { style = "height:330px; margin-top:10px" })
    .Resizable(resize => resize.Columns(true))
    .DataSource(dataSource => dataSource.Ajax()
        .Model(model => model.Id(p => p.ID))
        .Read(read => read.Action("GetIncidentHistory", "Incidents").Data("incidentID"))
        )
    )

    <div style="font-size:x-large; margin-top:10px">Uploaded Incident Files</div>
    
    @(Html.Kendo().Grid((IEnumerable<FileInfo>)ViewData["uploadedFiles"])
                .Name("uploadedFiles")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Name).Title("Uploaded Files").Width("90%");
                    columns.Command(command => command.Custom("Delete")
                        .Action("DeleteTemplate", "incidents")
                        .DataRouteValues(route =>
                        {
                            route.Add(p => p.Name).RouteKey("fName");
                        })
                    ).Width("10%");

                })
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .HtmlAttributes(new { style = "height:200px; margin-top:10px" })
    .Resizable(resize => resize.Columns(true))

    )
               
    <span class="k-button" style="float:left; margin-top:10px; margin-bottom:10px">
        <a onclick="checkOKtoClose()">Close Incident</a>
    </span>

    <span class="k-button" style="float:right; margin-top:10px; margin-bottom:10px">
        @Html.ActionLink("Return to " + ViewData["returnPage"], (string)ViewData["returnPage"], "Incidents")
    </span>

</div>

<style scoped>
    #vertical {
        height: auto;
        width: 1000px;
        margin: 0 auto;
    }
</style>

<!--Reference the SignalR library. -->
<script src="/Scripts/jquery.signalR-2.1.2.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="/signalr/hubs"></script>

<script>

    function incidentID()
    {
        var ID = @ViewData["IncidentID"];
        return { incidentID: ID };
    }

    function checkOKtoClose()
    {
        var filesExist = @Html.Raw(Json.Encode(ViewData["filesExist"]));

        if (filesExist == false)
            alert("No Files can't close")
        else
        {
            var ID = @ViewData["IncidentID"];
            window.location.href = "@Url.Action("setIncidentStatusToClose", "incidents")?ID=" + ID;
        }
    }

    $(document).ready(function () {


        var messageHub = $.connection.messageHub;
        var userName = "@HttpContext.Current.User.Identity.Name";

        $.connection.hub.qs = { 'userName': userName };
        var popupNotification = $("#popupNotification").data("kendoNotification");

        if ($.connection.hub.state === $.signalR.connectionState.disconnected) {
            $.connection.hub.start().done(function () {//when the connection is ready,

                popupNotification.show("Server Connection Established");
            });
        }

        messageHub.client.send = function (message) {
            if (message.messageType == "PM")
                popupNotification.show(message.message);
        };


    });

</script>
